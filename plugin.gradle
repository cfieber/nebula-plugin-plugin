
buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }

    dependencies {
        classpath "com.netflix.nebula:nebula-plugin-plugin:1.9.+"
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'hours'
    }
}

repositories {
    mavenLocal()
}

description 'Gradle plugin to setup nebula-plugin'
apply plugin: 'nebula-plugin'

dependencies {
    compile 'com.netflix.nebula:nebula-project-plugin:1.9.+'
    compile 'com.netflix.nebula:nebula-publishing-plugin:1.9.+'
    compile 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.3'
    compile 'com.github.townsfolk:gradle-release:1.2'

    // will get nebula-test from ourselves, the plugin
}

// Temporary until we can get locking into its own plugin
configurations {
    latest
}

dependencies {
    latest 'com.netflix.nebula:nebula-core:1.9.+'
    latest 'com.netflix.nebula:nebula-test:1.9.+'
}

task latest << {
    def latestDeps = configurations.latest.resolvedConfiguration.firstLevelModuleDependencies
    def depVers = latestDeps.collect { it.module.id }
    file('build/latest.properties').text = depVers.collect {"${it.group}.${it.name}.rev=${it.version}"}.join('\n') + '\n'
}

jar {
    from('build/latest.properties') {
        into('nebula/plugin/plugin')
    }
    dependsOn(latest)
}

def pomConfig = {
    inceptionYear '2014'

    developers {
        developer {
            id 'quidryan'
            name 'Justin Ryan'
            email 'justin@halfempty.org'
            roles{
                role 'Developer'
            }
            timezone '-8'
        }
    }
}

import nebula.plugin.publishing.maven.NebulaBaseMavenPublishingPlugin
plugins.withType(NebulaBaseMavenPublishingPlugin) {
    withMavenPublication {
        pom.withXml {
            asNode().children().last() + pomConfig
        }
    }
}
