buildscript {
    repositories { jcenter() }
    dependencies { classpath 'com.netflix.nebula:nebula-plugin-plugin:1.9.3' }
}

description 'Gradle plugin to setup nebula-plugin'
apply plugin: 'nebula-plugin'

dependencies {
    compile 'com.netflix.nebula:nebula-publishing-plugin:1.9.6'
    compile 'com.netflix.nebula:nebula-project-plugin:1.9.3'
    compile 'com.netflix.nebula:gradle-info-plugin:1.9.1'
    compile('com.jfrog.bintray.gradle:gradle-bintray-plugin:0.3') {
        exclude group: 'org.codehaus.groovy.modules.http-builder', module: 'http-builder'
    }
    compile('org.codehaus.groovy.modules.http-builder:http-builder:0.6') {
        exclude group: 'org.codehaus.groovy', module: 'groovy'
        exclude group: 'net.sourceforge.nekohtml', module: 'nekohtml'
    }
    compile('org.jfrog.buildinfo:build-info-extractor-gradle:2.2.2') // Way too many dependencies. :-(
    compile 'com.github.townsfolk:gradle-release:1.2'

    // will get nebula-test from ourselves, the plugin, but we should control the version here
    compile 'com.netflix.nebula:nebula-test:1.9.3'
}

// Temporary until we can get locking into its own plugin
configurations {
    latest
}

dependencies {
    // TODO Lock into 1.9.+ only once bintray can generate maven-metadata for linked repos
    latest 'com.netflix.nebula:nebula-core:1.9.3'
    latest 'com.netflix.nebula:nebula-test:1.9.3'
}

task latest << {
    def latestDeps = configurations.latest.resolvedConfiguration.firstLevelModuleDependencies
    def depVers = latestDeps.collect { it.module.id }
    def props = file('build/latest/nebula.properties')
    props.parentFile.mkdirs()
    props.text = depVers.collect {"${it.group}.${it.name}.rev=${it.version}"}.join('\n') + '\n'
}

jar {
    from('build/latest/') {
        into('/')
    }
    dependsOn(latest)
}

def pomConfig = {
    inceptionYear '2014'

    developers {
        developer {
            id 'quidryan'
            name 'Justin Ryan'
            email 'justin@halfempty.org'
            roles{
                role 'Developer'
            }
            timezone '-8'
        }
    }
}

import nebula.plugin.publishing.maven.NebulaBaseMavenPublishingPlugin
plugins.withType(NebulaBaseMavenPublishingPlugin) {
    withMavenPublication {
        pom.withXml {
            asNode().children().last() + pomConfig
        }
    }
}
